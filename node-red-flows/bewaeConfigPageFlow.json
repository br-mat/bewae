[
    {
        "id": "ca18495f6f6a16ae",
        "type": "tab",
        "label": "bewae-working",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "ed1d1764feb8f1e9",
        "type": "http in",
        "z": "ca18495f6f6a16ae",
        "name": "bewae config page",
        "url": "/bewae-working",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 170,
        "y": 120,
        "wires": [
            [
                "3d3b36e3782abc35"
            ]
        ]
    },
    {
        "id": "53827f0afa4f6d0c",
        "type": "json",
        "z": "ca18495f6f6a16ae",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 550,
        "y": 300,
        "wires": [
            [
                "111cbba3243539ee",
                "212711423decc1dd"
            ]
        ]
    },
    {
        "id": "3d3b36e3782abc35",
        "type": "template",
        "z": "ca18495f6f6a16ae",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>Bewae V3</title>\n  <style>\n  body {\n    margin: 0;\n    padding: 0;\n    font-family: Arial, sans-serif;\n  }\n\n  .violet-bar {\n    background-color: rgba(80, 30, 120, 0.9);\n    color: white;\n    padding: 20px;\n    text-align: left;\n    position: fixed;\n    width: 100%;\n    top: 0;\n    z-index: 2;\n  }\n\n  .sidebar {\n    height: 100%;\n    width: 250px;\n    position: fixed;\n    z-index: 1;\n    top: 58px;\n    left: 0;\n    background-color: rgba(80, 30, 120, 0.6);\n    overflow-x: hidden;\n    padding-top: 20px;\n  }\n\n  .sidebar a {\n    padding: 6px 8px 6px 16px;\n    text-decoration: none;\n    font-size: 25px;\n    color: #fff;\n    display: block;\n  }\n\n  .main-content {\n    margin-left: 250px;\n    padding: 20px;\n    margin-top: 60px;\n  }\n\n  .sidebar a:hover {\n    color: #f1f1f1;\n    background-color: rgba(255, 255, 255, 0.1);\n  }\n\n  /* Watering Table specific styling */\n  .table-container {\n    width: 100%;\n    margin: 0 auto;\n  }\n\n  #plantTable {\n    border-collapse: collapse;\n    width: 100%;\n  }\n\n  #plantTable th, #plantTable td {\n    border: 1px solid #ddd;\n    padding: 8px;\n    text-align: center;\n  }\n\n  #plantTable th {\n    background-color: #f2f2f2;\n  }\n\n  /* Style for every second row of the plant table */\n  #plantTable tr:nth-child(even) {\n    background-color: #d2abff; /* A light violet shade */\n  }\n\n  .plant-form {\n    margin-top: 20px;\n  }\n\n  .plant-form label {\n    display: block;\n    margin-bottom: 5px;\n  }\n\n  .plant-form input[type=\"text\"],\n  .plant-form input[type=\"number\"] {\n    width: 100%;\n    padding: 8px;\n    margin-bottom: 10px;\n    box-sizing: border-box;\n  }\n\n  .plant-form .add-plant-button {\n    background-color: #4CAF50;\n    color: white;\n    padding: 10px 20px;\n    border: none;\n    cursor: pointer;\n  }\n  \n  .plant-form .add-plant-button:hover {\n    background-color: #45a049;\n  }\n\n  /* Edit button specific styling */\n  .edit-button {\n    background-color: #f39c12;\n    color: black;\n  }\n  .edit-button:hover{\n    background-color: #f3ca12;\n  }\n\n  /* Delete button specific styling */\n  .delete-button {\n    background-color: #8e44ad;\n  }\n  .delete-button:hover {\n    background-color: #da4ced;\n  }\n  \n  /* Button hover effect for edit, delete, and add actions */\n  .edit-button:hover, .delete-button:hover, .add-plant-button:hover {\n    box-shadow: 0 6px 12px 0 rgba(0,0,0,0.3);\n  }\n\n  /* Save button specific styling */\n.save-button {\n  background-color: #f39c12;\n  color: black;\n  display: none; /* Save button starts hidden */\n}\n\n.save-button:hover {\n  background-color: #f3ca12;\n  box-shadow: 0 6px 12px 0 rgba(0,0,0,0.3);\n}\n\n/* Ensure the text color remains solid on interaction */\n.edit-button, .save-button, .delete-button {\n  /* ... existing styles ... */\n  color: black; /* Explicitly set the text color */\n}\n\n.edit-button:focus, .save-button:focus, .delete-button:focus,\n.edit-button:active, .save-button:active, .delete-button:active {\n  opacity: 1; /* Maintain full opacity on focus/active */\n  color: black; /* Maintain text color on focus/active */\n}\n\n.button-container {\n  margin-top: 1.5em; /* This will be relative to the current font size */\n}\n\n  /* Sensor Table specific styling */\n  #sensorTable {\n    border-collapse: collapse;\n    width: 100%;\n  }\n\n  #sensorTable th, #sensorTable td {\n    border: 1px solid #ddd;\n    padding: 8px;\n    text-align: center;\n  }\n\n  #sensorTable th {\n    background-color: #f2f2f2;\n  }\n\n  /* Style for every second row of the sensor table */\n  #sensorTable tr:nth-child(even) {\n    background-color: #d2abff; /* A light violet shade */\n  }\n\n  /* Sensor Form specific styling */\n  .sensor-form {\n    margin-top: 20px;\n  }\n\n  .sensor-form label {\n    display: block;\n    margin-bottom: 5px;\n  }\n\n  .sensor-form input[type=\"text\"],\n  .sensor-form input[type=\"number\"] {\n    width: 100%;\n    padding: 8px;\n    margin-bottom: 10px;\n    box-sizing: border-box;\n  }\n\n#additionalConfig .save-config-button {\n  background-color: #4CAF50;\n  color: white;\n  padding: 10px 20px;\n  border: none;\n  cursor: pointer;\n}\n\n#additionalConfig .save-config-button:hover {\n  background-color: #45a049;\n}\n\n\n/* Style the form rows */\n.form-row {\n  margin-bottom: 15px;\n}\n\n/* The switch - the box around the slider */\n.switch {\n  position: relative;\n  display: inline-block;\n  width: 50px; /* Adjusted width */\n  height: 25px; /* Adjusted height */\n}\n\n/* Hide default HTML checkbox */\n.switch input {\n  opacity: 0;\n  width: 0;\n  height: 0;\n}\n\n/* The slider */\n.slider {\n  position: absolute;\n  cursor: pointer;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background-color: #ccc; /* Light grey background */\n  -webkit-transition: .4s;\n  transition: .4s;\n}\n\n.slider:before {\n  position: absolute;\n  content: \"\";\n  height: 21px; /* Adjusted height */\n  width: 21px; /* Adjusted width */\n  left: 2px; /* Adjusted left position */\n  bottom: 2px; /* Adjusted bottom position */\n  background-color: #808080; /* Default grey color for ball */\n  -webkit-transition: .4s;\n  transition: .4s;\n}\n\ninput:checked + .slider {\n  background-color: #d2abff; /* Light violet shade when on */\n}\n\ninput:focus + .slider {\n  box-shadow: 0 0 1px #d2abff; /* Light violet shade for focus */\n}\n\ninput:checked + .slider:before {\n  background-color: #8e44ad; /* Deep purple color for ball when on */\n  -webkit-transform: translateX(25px); /* Adjusted translateX value */\n  -ms-transform: translateX(25px); /* Adjusted translateX value */\n  transform: translateX(25px); /* Adjusted translateX value */\n}\n\n/* Rounded sliders */\n.slider.round {\n  border-radius: 34px;\n}\n\n.slider.round:before {\n  border-radius: 50%;\n}\n\n.sensor-form .add-sensor-button {\n  background-color: #4CAF50;\n  color: white;\n  padding: 10px 20px;\n  border: none;\n  cursor: pointer;\n}\n\n.sensor-form .add-sensor-button:hover {\n  background-color: #45a049;\n}\n\n/* Dropdown Selectors Styling */\nselect {\n  padding: 8px 12px;\n  border: 1px solid #ccc;\n  border-radius: 4px;\n  background-color: #d2abff; /* Light violet shade to match the table row */\n  cursor: pointer;\n  outline: none;\n  color: #333; /* Text color for better readability */\n}\n\nselect:hover {\n  background-color: #e4c7ff; /* A lighter violet shade for hover state */\n}\n\nselect:focus {\n  border-color: #8e44ad; /* Violet shade for focus border to match the delete button */\n}\n\n\n\n\n  /* Dropdown Menu specific styling */\n  /* Dropdown Button */\n  .dropbtn {\n    background-color: #4CAF50;\n    color: white;\n    padding: 16px;\n    font-size: 16px;\n    border: none;\n    cursor: pointer;\n  }\n\n  /* The container <div> - needed to position the dropdown content */\n  .dropdown {\n    position: relative;\n    display: inline-block;\n  }\n\n  /* Dropdown Content (Hidden by Default) */\n  .dropdown-content {\n    display: none;\n    position: absolute;\n    background-color: #f9f9f9;\n    min-width: 160px;\n    box-shadow: 0px 8px 16px 0px rgba(0,0,0,0.2);\n    z-index: 1;\n  }\n\n  /* Links inside the dropdown */\n  .dropdown-content a {\n    color: black;\n    padding: 12px 16px;\n    text-decoration: none;\n    display: block;\n  }\n\n  /* Change color of dropdown links on hover */\n  .dropdown-content a:hover {background-color: #f1f1f1}\n\n  /* Show the dropdown menu when the button is clicked */\n  .dropdown-content.show {\n    display: block;\n  }\n  </style>\n\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <!-- Your head content -->\n</head>\n<body>\n  <!-- Navigation bar with title -->\n  <div class=\"violet-bar\">Bewae V3</div>\n\n  <!-- Sidebar -->\n  <div class=\"sidebar\">\n    <a href=\"#welcome\" onclick=\"showSection('welcome')\">Welcome Page</a>\n    <a href=\"#additionalConfig\" onclick=\"showSection('additionalConfig')\">Device</a>\n    <a href=\"#watering\" id=\"wateringLink\" onclick=\"showSection('watering')\">Irrigation</a>\n    <a href=\"#sensors\" onclick=\"showSection('sensors')\">Sensors</a>\n  </div>\n\n  <!-- Main content area -->\n  <div class=\"main-content\">\n    <!-- Welcome content -->\n    <div id=\"welcome\">\n      <h2>Welcome to Bewae V3!</h2>\n      <p>Please select an option from the sidebar to get started.</p>\n    </div>\n\n    <!-- Watering System content -->\n    <div id=\"watering\" style=\"display:none;\">\n      <div class=\"table-container\">\n        <h2>Watering System Configuration</h2>\n        <!-- Table container for displaying plant data -->\n        <div class=\"table-container\">\n          <table id=\"plantTable\">\n            <tr>\n              <th>Plant Name</th>\n              <th>Default Water</th>\n              <th>Plant Size</th>\n              <th>Pot Size</th>\n              <th>Water Times</th>\n              <th>vPins</th>\n              <th>Set</th>\n              <th>Actions</th>\n            </tr>\n            <!-- Rows with plant data will be dynamically added here -->\n          </table>\n        </div>\n\n        <!-- Form for adding new plant data -->\n        <div class=\"plant-form\">\n          <form id=\"plantForm\">\n            <label for=\"pn\">Plant Name:</label>\n            <input type=\"text\" id=\"pn\">\n\n            <label for=\"pw\">Default Water:</label>\n            <input type=\"number\" id=\"pw\">\n\n            <label for=\"pls\">Plant Size:</label>\n            <input type=\"number\" id=\"pls\">\n\n            <label for=\"pts\">Pot Size:</label>\n            <input type=\"number\" id=\"pts\">\n\n            <label for=\"wt\">Water Times (comma-separated):</label>\n            <input type=\"text\" id=\"wt\">\n\n            <label for=\"pp\">vPins (comma-separated):</label>\n            <input type=\"text\" id=\"pp\">\n\n            <label for=\"ps\">Set:</label>\n            <select id=\"ps\">\n              <option value=\"1\">True</option>\n              <option value=\"0\">False</option>\n            </select>\n            <!-- Add a div with a class for styling the button -->\n            <div class=\"button-container\">\n              <button type=\"button\" class=\"add-plant-button\" onclick=\"addItem(plantConfig)\">Add Plant</button>\n            </div>\n          </form>\n        </div>\n      </div>\n    </div>\n\n    <!-- Sensors content -->\n    <div id=\"sensors\" style=\"display:none;\">\n      <h2>Sensor Configuration</h2>\n      <div class=\"table-container\">\n        <table id=\"sensorTable\">\n          <tr>\n            <th>Sensor Name</th>\n            <th>Field</th>\n            <th>vPins</th>\n            <th>High Limit</th>\n            <th>Low Limit</th>\n            <th>Set</th>\n            <th>Actions</th>\n          </tr>\n          <!-- Rows with sensor data will be dynamically added here -->\n        </table>\n      </div>\n\n      <!-- Sensor Form -->\n      <div class=\"sensor-form\">\n        <form id=\"sensorForm\">\n          <label for=\"sn\">Sensor Name:</label>\n          <input type=\"text\" id=\"sn\">\n\n          <label for=\"sf\">Field:</label>\n          <select id=\"sf\" name=\"field\">\n            <option value=\"bmetemp\">BME280 Temperature</option>\n            <option value=\"bmehum\">BME280 Humidity</option>\n            <option value=\"bmepress\">BME280 Pressure</option>\n            <option value=\"soiltemp\">Soil Temperature</option>\n            <option value=\"analog\">Analog Measurement</option>\n            <option value=\"vanalog\">V Analog Measurement</option>\n            <!-- Add more options as needed -->\n          </select>\n\n          <label for=\"sp\">vPin:</label>\n          <input type=\"number\" id=\"sp\">\n\n          <label for=\"hl\">High Limit:</label>\n          <input type=\"number\" id=\"hl\">\n\n          <label for=\"ll\">Low Limit:</label>\n          <input type=\"number\" id=\"ll\">\n\n          <label for=\"ss\">Set:</label>\n          <select id=\"ss\">\n            <option value=\"1\">True</option>\n            <option value=\"0\">False</option>\n          </select>\n\n          <!-- Add a div with a class for styling the button -->\n          <div class=\"button-container\">\n            <button type=\"button\" class=\"add-sensor-button\" onclick=\"addItem(sensorConfig)\">Add Sensor</button>\n          </div>\n          \n        </form>\n      </div>\n    </div>\n\n<!-- Device Config content -->\n<div id=\"additionalConfig\" style=\"display:none;\">\n  <h2>Device Configuration</h2>\n  <form id=\"deviceConfigForm\">\n    <div class=\"form-row\">\n      <label for=\"dn\">Device Name:</label>\n      <input type=\"text\" id=\"dn\" name=\"deviceName\">\n    </div>\n    \n    <!-- Toggle switch for 'mssr' -->\n    <div class=\"form-row\">\n      <label for=\"mssr\">Datalogging Switch:</label>\n      <label class=\"switch\">\n        <input type=\"checkbox\" id=\"mssr\" name=\"mssr\">\n        <span class=\"slider round\"></span>\n      </label>\n    </div>\n\n    <!-- Toggle switch for 'irig' -->\n    <div class=\"form-row\">\n      <label for=\"irig\">Irrigation System Switch:</label>\n      <label class=\"switch\">\n        <input type=\"checkbox\" id=\"irig\" name=\"irig\">\n        <span class=\"slider round\"></span>\n      </label>\n    </div>\n\n    <!-- Add other configuration fields as needed -->\n    \n    <div class=\"button-container\">\n      <button type=\"button\" class=\"save-config-button\" onclick=\"addConfig(deviceConfig)\">Save Configuration</button>\n    </div>\n  </form>\n</div>\n\n\n  <script>\n    /*\n    function saveData(tableId, endpoint, keysMapping, inputTypes) {\n      const table = document.getElementById(tableId);\n      const rows = table.rows;\n\n      const data = [];\n      //const data = {};\n\n      // Iterate over each row (skip the header row)\n      for (let i = 1; i < rows.length; i++) {\n        const row = rows[i];\n        const cells = row.cells;\n        const rowData = {};\n\n        // Iterate over each cell in the row\n        for (let j = 0; j < cells.length - 1; j++) {\n          const key = Object.keys(keysMapping)[j];\n          const shortKey = keysMapping[key];\n          let value = cells[j].innerText;\n          rowData[shortKey] = value;\n          // Parse and format the cell value\n          //rowData[shortKey] = parseValue(value, shortKey);\n        }\n\n        // Format the rowData object to ensure consistent data types\n        const formattedRowData = formatDataItem(rowData, inputTypes);\n\n        // Add the formattedRowData object to the data array\n        data.push(formattedRowData);\n      }\n\n      // Convert the data array to JSON string\n      const jsonData = JSON.stringify(data);\n\n      // Send the JSON data using XMLHttpRequest\n      const xhr = new XMLHttpRequest();\n      xhr.open(\"POST\", endpoint, true);\n      xhr.setRequestHeader('Content-Type', 'application/json');\n      xhr.onreadystatechange = function() {\n        if (xhr.readyState === XMLHttpRequest.DONE) {\n          if (xhr.status === 200) {\n            console.log('Data saved successfully:', xhr.responseText);\n          } else {\n            console.error('Failed to save data. Status:', xhr.status);\n          }\n        }\n      };\n      xhr.send(jsonData);\n    }*/\n\nfunction saveData(tableId, endpoint, keysMapping, inputTypes) {\n  const table = document.getElementById(tableId);\n  const rows = table.rows;\n\n  // Initialize data as an array\n  const data = [];\n\n  // Iterate over each row (skip the header row)\n  for (let i = 1; i < rows.length; i++) {\n    const row = rows[i];\n    const cells = row.cells;\n    const rowData = {};\n\n    // Iterate over each cell in the row\n    for (let j = 0; j < cells.length - 1; j++) {\n      const key = Object.keys(keysMapping)[j];\n      const shortKey = keysMapping[key];\n      let value = cells[j].innerText;\n      rowData[shortKey] = value;\n      // Uncomment and implement parseValue if needed\n      // rowData[shortKey] = parseValue(value, shortKey);\n    }\n\n    // Format the rowData object to ensure consistent data types\n    const formattedRowData = formatDataItem(rowData, inputTypes);\n\n    // Add the formattedRowData object to the data array\n    data.push(formattedRowData);\n  }\n\n  // Convert the data array to an object with indices as keys\n  const dataObject = data.reduce((obj, item, index) => {\n    obj[index] = item; // Using the index as the key\n    return obj;\n  }, {});\n\n  // Convert the data object to JSON string\n  const jsonData = JSON.stringify(dataObject);\n\n  // Send the JSON data using XMLHttpRequest\n  const xhr = new XMLHttpRequest();\n  xhr.open(\"POST\", endpoint, true);\n  xhr.setRequestHeader('Content-Type', 'application/json');\n  xhr.onreadystatechange = function() {\n    if (xhr.readyState === XMLHttpRequest.DONE) {\n      if (xhr.status === 200) {\n        console.log('Data saved successfully:', xhr.responseText);\n      } else {\n        console.error('Failed to save data. Status:', xhr.status);\n      }\n    }\n  };\n  xhr.send(jsonData);\n}\n\n\n    function parseValue(value, elementId) {\n      // If the elementId a name, 'sn' or 'pn', always treat the value as a string\n      if (elementId === 'sn' || elementId === 'pn') {\n        return value.length > 20 ? value.substring(0, 20) : value;\n      }\n\n      // Check for comma-separated values and convert to array if all are numbers\n      if (value.includes(',')) {\n        const valuesArray = value.split(',').map(item => item.trim());\n        if (valuesArray.every(item => !isNaN(item) && item)) {\n          return valuesArray.map(item => parseFloat(item));\n        }\n      }\n\n      // Convert to number if it's a valid number, otherwise return as string\n      if (!isNaN(value) && value.trim() !== '') {\n        return parseFloat(value);\n      } else {\n        // Truncate the string to the first 8 characters if it's longer\n        return value.length > 8 ? value.substring(0, 8) : value;\n      }\n    }\n\n    function formatDataItem(item, inputTypes) {\n      // Helper function to parse string to array of numbers\n      function parseStringToArray(str) {\n        // Check if the input string is empty and return an empty array if true\n        if (str === \"\") {\n          return [];\n        }\n        // Otherwise, split the string and convert to numbers as before\n        return str.split(',').map(s => s.trim()).map(Number).filter(n => !isNaN(n));\n      }\n\n      // Iterate over each key in the item\n      for (const key in item) {\n        const expectedType = inputTypes[key];\n        let value = item[key];\n\n        // Preprocess string values for 'array' and 'timetable' types\n        if (typeof value === 'string' && (expectedType === 'array' || expectedType === 'timetable')) {\n          //console.log(\"RAW Logging array data: \", key, \" val: \", value);\n          value = parseStringToArray(value);\n        }\n\n        switch (expectedType) {\n          case 'array':\n            //console.log(\"Logging array data: \", key, \" val: \", value);\n            // Ensure the value is an array and contains only numbers, or an empty array if no valid numbers\n            item[key] = Array.isArray(value) && value.length > 0 ? value : [];\n            break;\n          case 'string':\n            // Ensure the value is a string with a maximum of 20 characters, or an empty string if invalid\n            item[key] = typeof value === 'string' ? value.substring(0, 20) : '';\n            break;\n          case 'number':\n            // Ensure the value is a number (int or float), negatives allowed, or 0 if invalid\n            item[key] = !isNaN(parseFloat(value)) && isFinite(value) ? Number(value) : 0;\n            break;\n          case 'timetable':\n            // Convert array of hours to a binary representation, or 0 if the array is empty\n            item[key] = Array.isArray(value) && value.length > 0 ? value.reduce((binary, hour) => binary | (1 << hour), 0) : 0;\n            console.log(\"Logging timetable value : \", value, \" item key: \", item[key]);\n            break;\n          // Add more cases as needed for different types\n        }\n      }\n      return item;\n    }\n\n    function initializeTable(config) {\n      console.log('Initializing table with id:', config.tableId);\n\n      const table = document.getElementById(config.tableId);\n      if (!table) {\n        console.error('Table not found:', config.tableId);\n        return;\n      }\n\n      // Clear existing table rows, except the header\n      //console.log('Clearing existing rows except the header');\n      while (table.rows.length > 1) {\n        //console.log('Deleting row:', table.rows[1].innerHTML);\n        table.deleteRow(1);\n      }\n\n      console.log('Table cleared, now repopulating with new data');\n      const keys = Object.keys(config.keysMapping);\n      const fragment = document.createDocumentFragment();\n\n      // Helper function to convert number to timetable array\n      function numberToTimetable(num) {\n        const hours = [];\n        for (let i = 0; i < 24; i++) {\n          if (num & (1 << i)) {\n            hours.push(i);\n          }\n        }\n        return hours;\n      }\n\n      // Populate table with data using the fragment\n      Object.values(config.data).forEach((item, index) => {\n        const newRow = fragment.appendChild(document.createElement('tr'));\n        keys.forEach((key) => {\n          const shortKey = config.keysMapping[key];\n          let value = item.hasOwnProperty(shortKey) ? item[shortKey] : '';\n\n          // Handle the 'timetable' case\n          if (shortKey === 'wt') {\n            value = numberToTimetable(value);\n          }\n\n          const cell = newRow.appendChild(document.createElement('td'));\n          cell.innerHTML = Array.isArray(value) ? value.join(',') : value;\n        });\n\n        // Add action buttons at the end of the row\n        const actionCell = newRow.appendChild(document.createElement('td'));\n        actionCell.appendChild(createButton('Edit', 'edit-button', () => editItem(newRow, config)));\n        actionCell.appendChild(createButton('Save', 'save-button', () => saveItem(newRow, config), { display: 'none' }));\n        actionCell.appendChild(createButton('Delete', 'delete-button', () => deleteItem(newRow, config)));\n\n        //console.log(`Added row ${index + 1}:`, newRow.innerHTML);\n      });\n\n      // Append the fragment to the table\n      table.appendChild(fragment);\n      console.log('Table initialized successfully with new data');\n    }\n\n    function createButton(text, className, handler, style = {}) {\n      const button = document.createElement('button');\n      button.textContent = text;\n      button.className = className;\n      Object.assign(button.style, style);\n      button.onclick = handler; // Use onclick for simplicity\n      return button;\n    }\n\n    function addItem(config) {\n      const table = document.getElementById(config.tableId);\n      const newRow = table.insertRow();\n\n      // Iterate over the config.keysMapping to get values and set empty fields to 0 or convert to number\n      Object.entries(config.keysMapping).forEach(([displayName, dataName]) => {\n        const element = document.getElementById(dataName);\n        if (!element) return; // Skip if the element is not found\n        let value = element.value;\n        const cell = newRow.insertCell();\n        cell.innerHTML = value;\n      });\n\n      // Add action buttons at the end of the row using arrow functions\n      const actionCell = newRow.insertCell();\n      actionCell.appendChild(createButton('Edit', 'edit-button', () => editItem(newRow, config)));\n      actionCell.appendChild(createButton('Save', 'save-button', () => saveItem(newRow, config), { display: 'none' })); // Save button starts hidden\n      actionCell.appendChild(createButton('Delete', 'delete-button', () => deleteItem(newRow, config)));\n\n      // Call saveData to save the entire table\n      saveData(config.tableId, config.endpoint, config.keysMapping, inputTypes);\n      loadAndInitializeTable(plantConfig);\n    }\n\n    function editItem(row, config) {\n      // Convert all cells except the action cell to editable inputs\n      for (let i = 0; i < row.cells.length - 1; i++) {\n        const cell = row.cells[i];\n        const text = cell.innerText;\n        cell.innerHTML = `<input type='text' value='${text}' />`;\n      }\n\n      // Hide the 'Edit' and 'Delete' buttons and show the 'Save' button\n      row.querySelector('.edit-button').style.display = 'none';\n      row.querySelector('.delete-button').style.display = 'none';\n      row.querySelector('.save-button').style.display = 'inline';\n    }\n\n    function saveItem(row, config) {\n      // Save the new values from the input fields\n      for (let i = 0; i < row.cells.length - 1; i++) {\n        const input = row.cells[i].querySelector('input');\n        const text = input ? input.value : '';\n        row.cells[i].innerText = text;\n      }\n\n      // Show the 'Edit' button, hide the 'Save' button, and make 'Delete' button visible again\n      row.querySelector('.edit-button').style.display = 'inline';\n      row.querySelector('.save-button').style.display = 'none';\n      row.querySelector('.delete-button').style.display = 'inline';\n\n      // Call saveData to save the entire table\n      saveData(config.tableId, config.endpoint, config.keysMapping, inputTypes);\n      loadAndInitializeTable(plantConfig);\n    }\n\n    function deleteItem(row, config) {\n      // Get the table element by ID\n      const table = document.getElementById(config.tableId);\n      // Check if the row has a defined rowIndex and is not the header row\n      if (row.rowIndex > 0) {\n        // Delete the row from the table\n        table.deleteRow(row.rowIndex);\n        // Log the deletion for debugging\n        console.log(`Deleted row at index: ${row.rowIndex} from table: ${config.tableId}`);\n        // Call saveData function here with the provided endpoint\n        saveData(config.tableId, config.endpoint, config.keysMapping, inputTypes);\n        loadAndInitializeTable(plantConfig);\n      } else {\n        console.error('Attempted to delete a non-data row.');\n      }\n    }\n\n    /* Device Config */\n\n    function saveForm(formData, config) {\n      // Fetch existing data from dataEndpoint\n      fetch(config.dataEndpoint)\n        .then(response => {\n          if (!response.ok) {\n            throw new Error('Failed to fetch existing data');\n          }\n          return response.json();\n        })\n        .then(existingData => {\n          // Merge formData with existingData\n          const newData = { ...existingData, ...formData };\n\n          // Convert the data to JSON string\n          const jsonData = JSON.stringify(newData);\n\n          // Send the JSON data using XMLHttpRequest\n          const xhr = new XMLHttpRequest();\n          xhr.open(\"POST\", config.endpoint, true);\n          xhr.setRequestHeader('Content-Type', 'application/json');\n          xhr.onreadystatechange = function() {\n            if (xhr.readyState === XMLHttpRequest.DONE) {\n              if (xhr.status === 200) {\n                console.log('Data saved successfully:', xhr.responseText);\n              } else {\n                console.error('Failed to save data. Status:', xhr.status);\n              }\n            }\n          };\n          xhr.send(jsonData);\n        })\n        .catch(error => {\n          console.error('Error:', error.message);\n        });\n    }\n\n    function addConfig(config) {\n      // Get the form element\n      const form = document.getElementById(config.tableId);\n\n      // Serialize form data into an object\n      const formData = new FormData(form);\n      const dataObject = {};\n\n      // Iterate over each entry in keysMapping\n      Object.entries(config.keysMapping).forEach(([longName, shortName]) => {\n        // Find the form field corresponding to the short name\n        const formField = form.elements[shortName];\n        if (formField) {\n          // Check if the form field has a value\n          if (formField.type === 'checkbox') {\n            dataObject[shortName] = formField.checked ? 1 : 0;\n          } else if (formField.value.trim() !== '') {\n            dataObject[shortName] = formField.value;\n          }\n        }\n      });\n      // Save the serialized data\n      saveForm(dataObject, config);\n    }\n\n    function loadDeviceConfig(deviceConfig) {\n      fetch(deviceConfig.dataEndpoint)\n        .then(response => {\n          if (!response.ok) {\n            throw new Error('Network response was not ok');\n          }\n          return response.json();\n        })\n        .then(data => {\n          console.log('Fetched device config data:', data); // Log the fetched data\n\n          // Prefill the device name\n          const deviceNameInput = document.getElementById('dn');\n          if (deviceNameInput) {\n            deviceNameInput.value = data['dn'] || '';\n          } else {\n            console.error('Device name input not found');\n          }\n\n          // Set the checkbox state for 'mssr'\n          const mssrCheckbox = document.getElementById('mssr');\n          if (mssrCheckbox) {\n            mssrCheckbox.checked = data['mssr'] === 1;\n          } else {\n            console.error('MSSR checkbox not found');\n          }\n\n          // Set the checkbox state for 'irig'\n          const irigCheckbox = document.getElementById('irig');\n          if (irigCheckbox) {\n            irigCheckbox.checked = data['irig'] === 1;\n          } else {\n            console.error('IRIG checkbox not found');\n          }\n\n          // Handle other fields similarly\n        })\n        .catch(error => {\n          console.error('Error loading device config:', error);\n          // Handle error by showing a message to the user or retrying the fetch\n        });\n    }\n\n    /* Constants */\n    const plantConfig = {\n      tableId: 'plantTable',\n      keysMapping: {\n        \"Plant Name\": \"pn\",\n        \"Default Water\": \"pw\",\n        \"Plant Size\": \"pls\",\n        \"Pot Size\": \"pts\",\n        \"Water Times\": \"wt\",\n        \"vPins\": \"pp\",\n        \"Set\": \"ps\"\n      },\n      endpoint: '/bewae/save-plant',\n      dataEndpoint: '/bewae/get-irrig-config'\n    };\n\n    const sensorConfig = {\n      tableId: 'sensorTable',\n      keysMapping: {\n        \"Sensor Name\": \"sn\",\n        \"Field\": \"sf\",\n        \"vPins\": \"sp\",\n        \"High Limit\": \"hl\",\n        \"Low Limit\": \"ll\",\n        \"Set\": \"ss\"\n      },\n      endpoint: '/bewae/sensor-save',\n      dataEndpoint: '/bewae/get-sensor-config'\n    };\n\n    const deviceConfig = {\n      tableId: 'deviceConfigForm',\n      keysMapping: {\n        \"Device Name\": \"dn\",\n        \"System\":\"main\",\n        \"Measurements\":\"mssr\",\n        \"Irrigation\":\"irig\"\n      },\n      endpoint: '/bewae/device-save',\n      dataEndpoint: '/bewae/get-device-config'\n    };\n\n    // Define a mapping of keys to their expected types\n    const inputTypes = {\n      'pn': 'string',\n      'pw': 'number',\n      'pls': 'number',\n      'pts': 'number',\n      'wt': 'timetable',\n      'pp': 'array',\n      'ps': 'number',\n      'sn': 'string',\n      'sf': 'string',\n      'sp': 'number',\n      'hl': 'number',\n      'll': 'number',\n      'ss': 'number'\n    };\n\n    /* Init & load */\n    function loadAndInitializeTable(config) {\n      console.log(`Loading data for table with id: ${config.tableId}`);\n      \n      loadData(config.dataEndpoint).then(data => {\n        console.log(`Data loaded for table with id: ${config.tableId}, initializing table.`);\n        config.data = data; // Assign the loaded data to the config\n        initializeTable(config); // Initialize the table with the new data\n      }).catch(error => {\n        console.error(`Error loading data for table with id: ${config.tableId}:`, error);\n      });\n    }\n\n    // load data\n    function loadData(path) {\n      return fetch(path)\n        .then(response => {\n          if (!response.ok) {\n            throw new Error('Network response was not ok');\n          }\n          return response.json();\n        })\n        .then(data => {\n          console.log('Data loaded:', data);\n          return data;\n        })\n        .catch(error => {\n          console.error('There has been a problem with your fetch operation:', error);\n        });\n    }\n\n    function showSection(sectionId) {\n      // Hide all sections\n      document.querySelectorAll('.main-content > div').forEach(function(div) {\n        div.style.display = 'none';\n      });\n      // Show the selected section\n      document.getElementById(sectionId).style.display = 'block';\n    }\n\n    document.addEventListener('DOMContentLoaded', (event) => {\n      loadAndInitializeTable(plantConfig); // plant table\n      loadAndInitializeTable(sensorConfig); // sensor table\n      loadDeviceConfig(deviceConfig); // device configuration data\n    });\n\n    // Show the welcome section by default\n    showSection('welcome');\n  </script>\n</body>\n</html>\n",
        "output": "str",
        "x": 560,
        "y": 120,
        "wires": [
            [
                "fe21dd6a2328e721",
                "b913867cc4dad89a"
            ]
        ]
    },
    {
        "id": "fe21dd6a2328e721",
        "type": "http response",
        "z": "ca18495f6f6a16ae",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 910,
        "y": 120,
        "wires": []
    },
    {
        "id": "7b7e8139040bf458",
        "type": "http in",
        "z": "ca18495f6f6a16ae",
        "name": "[get] irrigation config file",
        "url": "/bewae/get-irrig-config",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 180,
        "y": 300,
        "wires": [
            [
                "42af19a34bb54402"
            ]
        ]
    },
    {
        "id": "42af19a34bb54402",
        "type": "file in",
        "z": "ca18495f6f6a16ae",
        "name": "read file",
        "filename": "/home/yourUsr/bewae/web-config.json",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 400,
        "y": 300,
        "wires": [
            [
                "53827f0afa4f6d0c"
            ]
        ]
    },
    {
        "id": "111cbba3243539ee",
        "type": "http response",
        "z": "ca18495f6f6a16ae",
        "name": "return config File",
        "statusCode": "",
        "headers": {},
        "x": 870,
        "y": 300,
        "wires": []
    },
    {
        "id": "b913867cc4dad89a",
        "type": "debug",
        "z": "ca18495f6f6a16ae",
        "name": "debug 10",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 900,
        "y": 80,
        "wires": []
    },
    {
        "id": "212711423decc1dd",
        "type": "debug",
        "z": "ca18495f6f6a16ae",
        "name": "debug 11",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 900,
        "y": 260,
        "wires": []
    },
    {
        "id": "b237a7278448b73d",
        "type": "inject",
        "z": "ca18495f6f6a16ae",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{   \"1\": { \"pn\": \"Big Tomato15\", \"pw\": 20, \"pls\": 3, \"pts\": 0.3, \"wt\": 25, \"pp\": [1], \"ps\": 0 },   \"2\": { \"pn\": \"Red Rose20\", \"pw\": 15, \"pls\": 2, \"pts\": 0.2, \"wt\": 128, \"pp\": [2, 3], \"ps\": 1 },   \"3\": { \"pn\": \"Green Basil10\", \"pw\": 25, \"pls\": 1, \"pts\": 0.15, \"wt\": 129, \"pp\": [4], \"ps\": 1 },   \"4\": { \"pn\": \"Yellow Sunflower30\", \"pw\": 18, \"pls\": 4, \"pts\": 0.4, \"wt\": 1, \"pp\": [5], \"ps\": 1 } }",
        "payloadType": "json",
        "x": 390,
        "y": 340,
        "wires": [
            [
                "d3921adb377ee432"
            ]
        ]
    },
    {
        "id": "3f6b73c3391536fa",
        "type": "json",
        "z": "ca18495f6f6a16ae",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 550,
        "y": 480,
        "wires": [
            [
                "5b6540b0fedda5d9",
                "e1473193a459dd30"
            ]
        ]
    },
    {
        "id": "b5c05a3b575dd7d0",
        "type": "http in",
        "z": "ca18495f6f6a16ae",
        "name": "[get] sensor config file",
        "url": "/bewae/get-sensor-config",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 180,
        "y": 480,
        "wires": [
            [
                "273063d63e34b5b6"
            ]
        ]
    },
    {
        "id": "273063d63e34b5b6",
        "type": "file in",
        "z": "ca18495f6f6a16ae",
        "name": "read file",
        "filename": "/home/yourUsr/bewae/web-sensor-config.json",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 400,
        "y": 480,
        "wires": [
            [
                "3f6b73c3391536fa"
            ]
        ]
    },
    {
        "id": "5b6540b0fedda5d9",
        "type": "http response",
        "z": "ca18495f6f6a16ae",
        "name": "return config File",
        "statusCode": "",
        "headers": {},
        "x": 870,
        "y": 480,
        "wires": []
    },
    {
        "id": "e1473193a459dd30",
        "type": "debug",
        "z": "ca18495f6f6a16ae",
        "name": "debug 12",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 900,
        "y": 440,
        "wires": []
    },
    {
        "id": "fdb5238a4f624efb",
        "type": "http in",
        "z": "ca18495f6f6a16ae",
        "name": "[post] sensor config file",
        "url": "/bewae/sensor-save",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 180,
        "y": 560,
        "wires": [
            [
                "42d43881a8b1c569"
            ]
        ]
    },
    {
        "id": "d7250034925e4dae",
        "type": "file",
        "z": "ca18495f6f6a16ae",
        "name": "write file",
        "filename": "/home/yourUsr/bewae/web-sensor-config.json",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "utf8",
        "x": 560,
        "y": 560,
        "wires": [
            [
                "76dc92b07056a1bf"
            ]
        ]
    },
    {
        "id": "76dc92b07056a1bf",
        "type": "debug",
        "z": "ca18495f6f6a16ae",
        "name": "debug 13",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 900,
        "y": 560,
        "wires": []
    },
    {
        "id": "959a791205616d04",
        "type": "inject",
        "z": "ca18495f6f6a16ae",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{   \"1\": { \"sn\": \"bme280\", \"sf\": \"temp\", \"sm\": \"bmetemp\", \"ss\":0},   \"2\": { \"sn\": \"bme280\", \"sf\": \"hum\", \"sm\": \"bmehum\", \"ss\":0},   \"3\": { \"sn\": \"bme280\", \"sf\": \"press\", \"sm\": \"bmepress\", \"ss\":0},   \"4\": { \"sn\": \"Soil\", \"sf\": \"temp\", \"sm\": \"soiltemp\", \"ss\":0},   \"5\": { \"sn\": \"Soil\", \"sf\": \"moisture\", \"sm\": \"analog\", \"sp\": 15, \"hl\": 600, \"ll\": 250, \"ss\":0} }",
        "payloadType": "json",
        "x": 390,
        "y": 520,
        "wires": [
            [
                "42d43881a8b1c569"
            ]
        ]
    },
    {
        "id": "42d43881a8b1c569",
        "type": "json",
        "z": "ca18495f6f6a16ae",
        "name": "",
        "property": "payload",
        "action": "str",
        "pretty": true,
        "x": 390,
        "y": 560,
        "wires": [
            [
                "d7250034925e4dae"
            ]
        ]
    },
    {
        "id": "9cf0277461519ffa",
        "type": "json",
        "z": "ca18495f6f6a16ae",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 550,
        "y": 660,
        "wires": [
            [
                "c4744d7fba1a051e",
                "431ab81035252336"
            ]
        ]
    },
    {
        "id": "8ee17cd07c32a9e7",
        "type": "http in",
        "z": "ca18495f6f6a16ae",
        "name": "[get] system config file",
        "url": "/bewae/get-device-config",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 180,
        "y": 660,
        "wires": [
            [
                "d55f828529a7be77"
            ]
        ]
    },
    {
        "id": "d55f828529a7be77",
        "type": "file in",
        "z": "ca18495f6f6a16ae",
        "name": "read file",
        "filename": "/home/yourUsr/bewae/web-bewae-config.json",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 400,
        "y": 660,
        "wires": [
            [
                "9cf0277461519ffa"
            ]
        ]
    },
    {
        "id": "c4744d7fba1a051e",
        "type": "http response",
        "z": "ca18495f6f6a16ae",
        "name": "return config File",
        "statusCode": "",
        "headers": {},
        "x": 870,
        "y": 660,
        "wires": []
    },
    {
        "id": "431ab81035252336",
        "type": "debug",
        "z": "ca18495f6f6a16ae",
        "name": "debug 14",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 900,
        "y": 620,
        "wires": []
    },
    {
        "id": "c94b4efef886dc04",
        "type": "http in",
        "z": "ca18495f6f6a16ae",
        "name": "[post] system config file",
        "url": "/bewae/device-save",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 180,
        "y": 740,
        "wires": [
            [
                "1e7e92d0f8173722"
            ]
        ]
    },
    {
        "id": "6df907323d5f4a5c",
        "type": "file",
        "z": "ca18495f6f6a16ae",
        "name": "write file",
        "filename": "/home/yourUsr/bewae/web-bewae-config.json",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "utf8",
        "x": 560,
        "y": 740,
        "wires": [
            [
                "db95ff0fed7f5f09"
            ]
        ]
    },
    {
        "id": "db95ff0fed7f5f09",
        "type": "debug",
        "z": "ca18495f6f6a16ae",
        "name": "debug 15",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 900,
        "y": 740,
        "wires": []
    },
    {
        "id": "1007fc40cc701edb",
        "type": "inject",
        "z": "ca18495f6f6a16ae",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"dn\":\"Test\",\"mssr\":1,\"main\":1,\"irig\":0,\"dummy\":99}",
        "payloadType": "json",
        "x": 390,
        "y": 700,
        "wires": [
            [
                "1e7e92d0f8173722"
            ]
        ]
    },
    {
        "id": "1e7e92d0f8173722",
        "type": "json",
        "z": "ca18495f6f6a16ae",
        "name": "",
        "property": "payload",
        "action": "str",
        "pretty": true,
        "x": 390,
        "y": 740,
        "wires": [
            [
                "6df907323d5f4a5c"
            ]
        ]
    },
    {
        "id": "e4b9f1f7d373f35c",
        "type": "http in",
        "z": "ca18495f6f6a16ae",
        "name": "[post] irrigation config file",
        "url": "/bewae/save-plant",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 190,
        "y": 380,
        "wires": [
            [
                "d3921adb377ee432"
            ]
        ]
    },
    {
        "id": "b07bb4e680299ed8",
        "type": "file",
        "z": "ca18495f6f6a16ae",
        "name": "write file",
        "filename": "/home/yourUsr/bewae/web-config.json",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "utf8",
        "x": 560,
        "y": 380,
        "wires": [
            [
                "bd1152747d94e61b"
            ]
        ]
    },
    {
        "id": "bd1152747d94e61b",
        "type": "debug",
        "z": "ca18495f6f6a16ae",
        "name": "debug 9",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 900,
        "y": 380,
        "wires": []
    },
    {
        "id": "d3921adb377ee432",
        "type": "json",
        "z": "ca18495f6f6a16ae",
        "name": "",
        "property": "payload",
        "action": "str",
        "pretty": true,
        "x": 390,
        "y": 380,
        "wires": [
            [
                "b07bb4e680299ed8"
            ]
        ]
    }
]